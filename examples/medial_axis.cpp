#include <Voronoi.hpp>
#include <fstream>
#include <map>

template <class T> struct Vector
{
    T x, y;
    constexpr Vector operator-(const Vector& other) { return {x - other.x, y - other.y}; }
};

static constexpr size_t pointCount = 356;
extern Vector<float> points[pointCount];

int main()
{
    auto discardOutside = [&](const auto& voronoiVertex)
    {
        auto sorted = voronoiVertex.triangle;
        std::sort(sorted.begin(), sorted.end());
        auto normalA = *sorted[1] - *sorted[0];
        auto normalB = *sorted[2] - *sorted[0];
        auto winding = normalA.x*normalB.y - normalA.y*normalB.x >= 0;
        return winding;
    };
    auto diagram = Voronoi::generate(points, points + pointCount, discardOutside);

    std::ofstream svg{"medial_axis.svg"};

    svg << R"(<?xml version="1.0" encoding="UTF-8"?>)";
    svg << R"(<svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="100%" height="100%" )"
           R"(viewBox="0 0 370 370" style="background-color: #1e1e1e">)";

    for (const auto& vertex : diagram.vertices)
    {
        if (!discardOutside(vertex))
        {
            svg << R"(<polygon points=")";
            svg << vertex.triangle[0]->x << "," << vertex.triangle[0]->y << " ";
            svg << vertex.triangle[1]->x << "," << vertex.triangle[1]->y << " ";
            svg << vertex.triangle[2]->x << "," << vertex.triangle[2]->y << " ";
            svg << R"(" fill="rgba(255, 60, 100, 0.5) " stroke="rgb(255, 60, 100) " stroke-width="0.5" />)";
        }
    }

    for (auto& cell : diagram.cells)
    {
        auto incidentEdge = cell.incidentEdge;
        auto edge = incidentEdge;
        do {
            if (edge->isFinite())
            {
                svg << R"(<polyline points=")";
                svg << edge->vertex->circumcenter.x << ", " << edge->vertex->circumcenter.y << " ";
                svg << edge->twin->vertex->circumcenter.x << ", " << edge->twin->vertex->circumcenter.y << " ";
                svg << R"(" fill="none" stroke="rgba(180, 255, 240, 0.5) " stroke-width="1.5" />)";
            }
        } while ((edge = edge->next) != incidentEdge);
    }

    for (auto& point : points)
        svg << R"(<circle cx=")" << point.x << R"(" cy=")" << point.y << R"(" r="1.0" fill="white" />)";


    auto* vertex = &diagram.vertices[0];
    auto* predecessor = vertex;
    std::map<decltype(vertex), decltype(vertex)> branches = {};
    std::vector<decltype(branches.begin())> openBranches;

    while (true)
    {
        decltype(vertex) successor[2] = { nullptr };
        auto* incidentEdge = vertex->incidentEdge;
        auto* edge = incidentEdge;

        do {
            if (edge->isFinite())
            {
                auto* adjacent = edge->twin->vertex;
                if (adjacent != predecessor) successor[successor[0] != nullptr] = adjacent;
            }
        } while ((edge = edge->twin->next) != incidentEdge);

        if (successor[1])
        {
            if (auto branch = branches.find(vertex); branch != branches.end())
            {
                // Branch already exists, we will ignore this vertex
                successor[0] = nullptr;
                if (auto open = std::find(openBranches.begin(), openBranches.end(), branch); open != openBranches.end())
                    openBranches.erase(open);
            }
            else
            {
                openBranches.push_back(branches.insert({ vertex, successor[1] }).first);
                svg << R"(<circle cx=")" << vertex->circumcenter.x << R"(" cy=")" 
                                         << vertex->circumcenter.y << R"(" r="1.5" fill="rgb(70, 255, 200) " />)";
            }
        }

        if (successor[0])
        {
            // Arrived at the root vertex, medial axis is a closed circle
            if (successor[0] == &diagram.vertices[0])
                break;

            predecessor = vertex;
            vertex = successor[0];
        }
        else if (!openBranches.empty())
        {
            predecessor = openBranches.back()->first;
            vertex = openBranches.back()->second;
            openBranches.pop_back();
        }
        else break;

    }

    svg << "</svg>\n";

    return 0;
}

Vector<float> points[] = {
        {58.010803f, 4.4401407f}, {55.8975f, 6.6502957f}, {53.829098f, 9.8896055f}, {51.867462f, 14.048463f}, {49.830936f, 18.653103f}, {47.36963f, 22.93787f}, {44.191784f, 26.227526f},
        {40.305836f, 28.518654f}, {35.892708f, 30.29637f}, {31.200928f, 31.925905f}, {26.614368f, 33.617558f}, {22.523571f, 35.560192f}, {19.118774f, 37.998367f}, {16.316908f, 41.110355f},
        {13.920128f, 44.801815f}, {11.769277f, 48.840195f}, {9.69323f, 52.95234f}, {7.3927045f, 56.896614f}, {4.634297f, 60.50766f}, {2.020675f, 64.25679f}, {1.3076723f, 69.32034f},
        {1.6375661f, 74.68767f}, {2.6688516f, 79.62901f}, {4.3715773f, 83.74867f}, {6.826973f, 86.87929f}, {10.148936f, 89.02056f}, {14.363062f, 90.33815f}, {19.374264f, 91.12638f},
        {24.995487f, 91.70774f}, {30.96341f, 92.37112f}, {36.972736f, 93.30851f}, {42.741405f, 94.61838f}, {43.140507f, 100.2153f}, {42.83925f, 105.747246f}, {41.800827f, 110.83611f},
        {40.212357f, 115.402664f}, {38.345318f, 119.65996f}, {36.393852f, 123.8448f}, {34.432697f, 128.04538f}, {32.502247f, 132.23648f}, {30.67159f, 136.43076f}, {29.031622f, 140.73157f},
        {27.60883f, 145.35205f}, {26.330154f, 150.40508f}, {25.105303f, 155.67378f}, {23.955214f, 160.66151f}, {23.07341f, 164.98274f}, {22.713835f, 168.73749f}, {23.010332f, 172.48293f},
        {23.808676f, 176.793f}, {24.870283f, 181.79228f}, {26.045013f, 187.1039f}, {27.355093f, 192.20569f}, {28.899591f, 196.85007f}, {30.72664f, 201.12117f}, {32.80809f, 205.16388f},
        {35.0992f, 208.99236f}, {37.57754f, 212.64182f}, {40.158844f, 216.26427f}, {42.68165f, 220.03339f}, {44.96943f, 224.02136f}, {46.93153f, 228.2778f}, {48.567802f, 232.97285f},
        {49.8973f, 238.25839f}, {50.93579f, 244.05742f}, {51.723934f, 250.00128f}, {52.375233f, 255.63995f}, {53.045284f, 260.74847f}, {53.836205f, 265.47232f}, {54.695786f, 270.26633f},
        {55.461372f, 275.52798f}, {55.989983f, 281.34344f}, {56.274117f, 287.502f}, {56.394707f, 293.7592f}, {56.430054f, 300.01227f}, {56.387283f, 306.25302f}, {56.167065f, 312.411f},
        {55.537426f, 318.1988f}, {54.141308f, 323.152f}, {51.595234f, 326.86386f}, {47.919804f, 329.5005f}, {43.486248f, 331.45056f}, {38.84064f, 333.1023f}, {34.575706f, 334.92078f},
        {31.150251f, 337.349f}, {28.868235f, 340.61508f}, {27.887743f, 344.4987f}, {28.1376f, 348.41696f}, {29.650593f, 351.75925f}, {33.26009f, 353.66748f}, {38.078976f, 354.83185f},
        {43.71894f, 355.44928f}, {49.611984f, 355.5403f}, {55.13079f, 354.95807f}, {59.81151f, 353.46262f}, {63.56058f, 350.98898f}, {66.7057f, 347.8645f}, {69.42414f, 344.3466f},
        {71.77962f, 340.5271f}, {73.84415f, 336.50125f}, {75.73141f, 332.3465f}, {77.48123f, 328.05933f}, {79.14187f, 323.55243f}, {80.833885f, 318.87128f}, {82.658936f, 314.17667f},
        {84.587715f, 309.5259f}, {86.50814f, 304.8039f}, {88.366844f, 299.93735f}, {92.31542f, 301.76453f}, {95.77539f, 304.28143f}, {98.58517f, 307.67664f}, {100.99267f, 311.56473f},
        {103.32278f, 315.49f}, {105.84407f, 319.19705f}, {108.69785f, 322.61115f}, {111.76671f, 325.8782f}, {114.733826f, 329.18097f}, {117.240074f, 332.7064f}, {119.20029f, 336.4018f},
        {113.41396f, 337.96655f}, {108.07243f, 339.55994f}, {103.56899f, 341.37796f}, {99.973274f, 343.7059f}, {97.4087f, 346.8468f}, {96.14728f, 350.80594f}, {96.18361f, 355.0107f},
        {97.415634f, 358.8116f}, {101.69061f, 360.1079f}, {106.83996f, 360.77362f}, {112.62377f, 361.06064f}, {118.75409f, 361.16165f}, {124.99663f, 361.1883f}, {131.25414f, 361.18756f},
        {137.50435f, 361.17908f}, {143.75366f, 361.17105f}, {150.00226f, 361.16513f}, {156.25308f, 361.15973f}, {162.51682f, 361.13986f}, {168.76797f, 361.06747f}, {174.88179f, 360.86475f},
        {180.59952f, 360.43967f}, {185.73871f, 359.76547f}, {190.332f, 359.00412f}, {194.657f, 358.4765f}, {198.93338f, 358.44583f}, {203.3482f, 358.8527f}, {208.02104f, 359.3823f},
        {213.0411f, 359.72275f}, {218.21379f, 359.71152f}, {223.25366f, 359.28375f}, {228.04672f, 358.4229f}, {232.77498f, 357.18954f}, {237.54051f, 355.7237f}, {242.19937f, 354.12146f},
        {246.48015f, 352.3312f}, {250.34946f, 350.2139f}, {254.01913f, 347.7537f}, {257.7628f, 345.14136f}, {261.60382f, 342.5711f}, {265.3833f, 340.06305f}, {268.91577f, 337.44458f},
        {272.20303f, 334.60117f}, {275.3244f, 331.54755f}, {278.31604f, 328.37424f}, {281.11124f, 325.06677f}, {283.69244f, 321.54404f}, {286.10022f, 317.74963f}, {288.41934f, 313.7386f},
        {290.6516f, 309.59372f}, {292.76538f, 305.39816f}, {294.69592f, 301.18076f}, {296.3964f, 296.85577f}, {297.83963f, 292.20688f}, {299.07642f, 287.10214f}, {300.19882f, 281.75278f},
        {301.2452f, 276.5929f}, {302.11066f, 271.91138f}, {302.6141f, 267.66812f}, {302.61044f, 263.58676f}, {302.105f, 259.34854f}, {301.2515f, 254.64232f}, {300.2599f, 249.34175f},
        {299.2891f, 243.63878f}, {298.35648f, 238.0216f}, {297.3639f, 232.85954f}, {296.20773f, 228.1147f}, {294.88116f, 223.44876f}, {293.44772f, 218.68849f}, {291.94928f, 213.92085f},
        {290.38348f, 209.26761f}, {288.76587f, 204.62401f}, {287.14444f, 199.90337f}, {285.537f, 195.1911f}, {283.8902f, 190.66731f}, {282.13126f, 186.36194f}, {280.24008f, 182.13654f},
        {278.2707f, 177.83397f}, {276.3336f, 173.32162f}, {274.52628f, 168.64642f}, {272.86218f, 163.94168f}, {271.28943f, 159.2899f}, {269.82916f, 154.49423f}, {268.69583f, 149.30647f},
        {268.24768f, 143.75806f}, {268.7915f, 138.26778f}, {270.37604f, 133.34972f}, {272.6895f, 129.17024f}, {275.1988f, 125.434586f}, {277.38953f, 121.61225f}, {278.86682f, 117.279945f},
        {279.4371f, 112.456154f}, {279.02313f, 107.60487f}, {277.57483f, 103.300606f}, {275.09598f, 99.97442f}, {271.73657f, 97.80348f}, {267.80078f, 96.82267f}, {263.68152f, 96.98098f},
        {259.73538f, 98.17374f}, {256.1379f, 100.22786f}, {252.90688f, 102.92327f}, {250.01208f, 106.09064f}, {247.41304f, 109.63688f}, {245.05344f, 113.47923f}, {242.8874f, 117.52203f},
        {240.98766f, 121.78184f}, {239.49301f, 126.44341f}, {238.51942f, 131.72748f}, {238.06505f, 137.5864f}, {238.08415f, 143.68192f}, {238.55956f, 149.51894f}, {239.50589f, 154.79726f},
        {240.8824f, 159.56859f}, {242.52937f, 164.1888f}, {244.2533f, 168.8723f}, {245.96036f, 173.55882f}, {247.69519f, 178.05553f}, {249.52957f, 182.32832f}, {251.46608f, 186.4967f},
        {253.44464f, 190.66362f}, {255.42204f, 194.84715f}, {257.38837f, 199.05684f}, {259.3282f, 203.36719f}, {261.1878f, 207.89452f}, {262.91174f, 212.59163f}, {264.51218f, 217.30911f},
        {266.05536f, 221.97574f}, {267.57437f, 226.7792f}, {269.01187f, 231.8728f}, {270.29718f, 237.08153f}, {271.44135f, 242.07072f}, {272.5125f, 246.77544f}, {273.51532f, 251.55537f},
        {274.3506f, 256.79993f}, {274.892f, 262.60364f}, {275.07626f, 268.74597f}, {274.88113f, 274.88568f}, {274.29578f, 280.67554f}, {273.34326f, 285.887f}, {272.12308f, 290.62805f},
        {270.71066f, 295.22623f}, {269.05035f, 299.87332f}, {266.9946f, 304.36005f}, {264.5077f, 308.40512f}, {261.73746f, 311.97995f}, {258.8456f, 315.281f}, {255.88158f, 318.4389f},
        {252.81157f, 321.49368f}, {249.58334f, 324.44354f}, {246.1202f, 327.2535f}, {242.38535f, 329.8435f}, {238.40265f, 332.13925f}, {234.18367f, 334.10672f}, {229.57301f, 335.69028f},
        {224.39426f, 336.76273f}, {218.7284f, 337.12692f}, {213.0653f, 336.5442f}, {208.13956f, 334.71576f}, {205.84149f, 330.224f}, {204.82251f, 324.7845f}, {204.67699f, 318.87506f},
        {205.00294f, 312.73825f}, {205.46198f, 306.47668f}, {205.84283f, 300.15405f}, {206.07176f, 293.82492f}, {206.1682f, 287.52164f}, {206.17558f, 281.23578f}, {206.10022f, 274.9388f},
        {205.9048f, 268.6462f}, {205.53088f, 262.4849f}, {204.91379f, 256.7142f}, {203.99721f, 251.51016f}, {202.7796f, 246.77303f}, {201.36063f, 242.13435f}, {199.85454f, 237.39246f},
        {198.29652f, 232.635f}, {196.61436f, 228.09358f}, {194.76f, 223.80388f}, {192.7519f, 219.67247f}, {190.58727f, 215.67757f}, {188.1722f, 211.86609f}, {185.48615f, 208.23257f},
        {182.68365f, 204.66571f}, {179.90529f, 201.19691f}, {177.01233f, 197.99945f}, {173.83737f, 195.09764f}, {170.41241f, 192.28333f}, {166.96045f, 189.34132f}, {163.56439f, 186.32854f},
        {160.22565f, 183.32854f}, {156.91379f, 180.36804f}, {153.61652f, 177.41757f}, {150.33865f, 174.46411f}, {147.08461f, 171.50206f}, {143.87015f, 168.51202f}, {140.70241f, 165.48444f},
        {137.57942f, 162.42668f}, {134.528f, 159.30443f}, {131.5752f, 156.02739f}, {128.8198f, 152.38329f}, {126.39281f, 148.23119f}, {124.388565f, 143.6805f}, {122.76492f, 139.03294f},
        {121.37932f, 134.4075f}, {120.11131f, 129.58177f}, {118.9332f, 124.286415f}, {117.869354f, 118.61519f}, {116.88682f, 113.02049f}, {115.866455f, 107.86676f}, {114.68069f, 103.1088f},
        {113.301994f, 98.44234f}, {111.8096f, 93.703186f}, {110.28937f, 89.00129f}, {108.74786f, 84.47255f}, {107.11394f, 80.13549f}, {105.32428f, 75.8663f}, {103.396454f, 71.55175f},
        {101.446045f, 67.045654f}, {99.57811f, 62.358433f}, {97.78786f, 57.610382f}, {95.99401f, 52.949776f}, {94.20198f, 48.3377f}, {92.53828f, 43.716137f}, {91.103424f, 39.09855f},
        {89.840225f, 34.49211f}, {88.616005f, 29.787004f}, {87.3305f, 24.971867f}, {85.92909f, 20.289644f}, {84.31905f, 16.103336f}, {81.03118f, 15.813693f}, {77.418686f, 16.292107f},
        {73.616516f, 16.909182f}, {69.8605f, 16.775656f}, {66.67243f, 14.555481f}, {64.06014f, 11.145672f}, {61.9321f, 7.137358f}, {60.07502f, 2.9639065f}
    };